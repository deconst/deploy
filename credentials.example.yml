---

## Customization
# Tweak these settings to make your instance unique.

# Give your instance a unique name to distinguish it from others running on the same account
# and region. Resource names will include this string.
instance:

# Modify this to launch a new backend behind the same load balancers. This is useful for launching
# a new batch of worker hosts to implement large changes in architecture without incurring
# downtime.
deployment: blue

# Make this an array of GitHub usernames to install these users' public SSH keys on all provisioned
# hosts, granting them access.
github_usernames: []

# Name and URL of the GitHub repository containing the site mapping and layouts.
#
# `control_repository_name` should be used if the control repository is hosted on GitHub. If it
# is, the control repository webhooks will be automatically created by the playbook. If it isn't,
# specify any git URL as `control_repository_url`, leave `control_repository_name` blank, and
# set up webhooks on the control repository manually.
control_repository_name: deconst/control-example
control_repository_url: https://github.com/{{ control_repository_name }}.git

# Branch of the control repository that governs this deployment.
control_repository_branch: master

# Cloud Files containers used to store raw content as metadata envelopes and to
# store CDN-distributed, fingerprinted assets.
#
# These containers will be created by the content service at first launch.
content_container: deconst-docs
asset_container: deconst-assets

# Number of worker hosts to provision.
worker_count: 3

# Rackspace server flavor to use for worker hosts.
worker_flavor: general1-2

# Number of "pods" of related services to launch on each worker host.
pod_count: 2

# Number of servers to include in the elasticsearch cluster.
elastic_count: 1

# Rackspace server flavor to use for elasticsearch hosts.
elastic_flavor: general1-2

# Optionally override the domain of presented URLs.
#
# This is most useful for testing locally, staging environments, or deployments that don't have
# DNS configured yet.
presented_url_domain:

# Configure logging levels.
log_level: INFO
content_log_level: "{{ log_level }}"
layout_log_level: "{{ log_level }}"
map_log_level: "{{ log_level }}"
presenter_log_level: "{{ log_level }}"
webhook_log_level: "{{ log_level }}"

# Enable or disable diagnostics that are dangerous to enable in production.
# enable_diagnostics: yes

# Restart policy for the service containers.
#
# Set this to "no" (with the quotes) to disable automatic container restarts on the cluster. This
# is most useful for debugging service instability problems.
restart: always

## Secrets
# Keep these safe.

# Rackspace credentials
rackspace_username:
rackspace_api_key:
rackspace_region:

# Name of an SSH keypair present on the account and region that you've specified above.
rackspace_keyname:

# Administrator credentials for the build host
build_admin_email:
build_admin_password:

# MongoDB URI
#
# Split into components. mongodb_host should also include ports and database as needed.
mongodb_username:
mongodb_password:
mongodb_host:

mongodb_uri: "mongodb://{{ mongodb_username }}:{{ mongodb_password }}@{{ mongodb_host }}"

# Elasticsearch
#
# Credentials used to access your Elasticsearch instance.
elasticsearch_username:
elasticsearch_password:

elasticsearch_hosts: []
elasticsearch_transport_port:
elasticsearch_api_proto: https
elasticsearch_api_port:

# GitHub access token used to validate received webhook payloads.
control_repository_token:

# GitHub OAuth token used to manage webhooks.
#
# Generate a unique token for this at: https://github.com/settings/tokens/new
github_oauth_user:
github_oauth_token:

# Choose a secure administrative API key for the content service.
# For example:
#  hexdump -v -e '1/1 "%.2x"' -n 128 /dev/random
content_admin_apikey:

# List of IP addresses from which incoming SSH connections should be accepted.
# Leave this as an empty collection to accept SSH connections from any IP.
source_addresses: []
