---
# Provision hosts and other necessary infrastructure.

- name: provision hosts
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
  - vars.yml
  - credentials.yml
  tasks:

  - name: worker hosts
    rax:
      state: present
      name: deconst-{{ instance }}-worker-{{ deployment }}-%03d
      group: deconst-{{ instance }}-worker-{{ deployment }}
      count: "{{ worker_count }}"
      exact_count: yes
      image: "{{ image_coreos_beta }}"
      flavor: "{{ worker_flavor }}"
      key_name: "{{ rackspace_keyname }}"
      wait: yes
    register: rax_build_workers
    tags: always

  - name: add newly provisioned workers to the correct groups
    add_host:
      name: "{{ item.name }}"
      ansible_ssh_host: "{{ item.rax_accessipv4 }}"
      fresh_host: yes
      groups: deconst-{{ instance }}-worker-{{ deployment }}
    when: rax_build_workers.action == "create"
    with_items: rax_build_workers.success
    tags: always

  - name: add all worker hosts to the correct groups
    add_host:
      name: "{{ item.name }}"
      groups: deconst-worker
    with_items: rax_build_workers.instances
    tags: always

  - name: identify full worker cluster rebuilds
    set_fact:
      fresh_worker_cluster: "{{ (rax_build_workers.action == 'create' and rax_build_workers.success | length == worker_count) | bool }}"
    tags: always

  - name: elasticsearch hosts
    rax:
      state: present
      name: deconst-{{ instance }}-elastic-{{ deployment }}-%03d
      group: deconst-{{ instance }}-elastic-{{ deployment }}
      count: "{{ elastic_count }}"
      exact_count: yes
      image: "{{ image_coreos_beta }}"
      flavor: "{{ elastic_flavor }}"
      key_name: "{{ rackspace_keyname }}"
      wait: yes
    register: rax_build_elastic
    tags: always

  - name: add newly provisioned elastic hosts to the correct groups
    add_host:
      name: "{{ item.name }}"
      ansible_ssh_host: "{{ item.rax_accessipv4 }}"
      fresh_host: yes
      groups: deconst-{{ instance }}-elastic-{{ deployment }}
    when: rax_build_elastic.action == "create"
    with_items: rax_build_elastic.success
    tags: always

  - name: add all elasticsearch hosts to the correct groups
    add_host:
      name: "{{ item.name }}"
      ansible_ssh_host: "{{ item.rax_accessipv4 }}"
      groups: deconst-elastic,deconst-{{ instance }}-elastic-{{ deployment }}
    with_items: rax_build_elastic.instances
    tags: always

  - name: identify full elastic cluster rebuilds
    set_fact:
      fresh_elastic_cluster: "{{ (rax_build_elastic.action == 'create' and rax_build_elastic.success | length == elastic_count) | bool }}"
    tags: always

  - name: build hosts
    rax:
      state: present
      name: deconst-{{ instance }}-build-{{ deployment }}-%03d
      group: deconst-{{ instance }}-build-{{ deployment }}
      count: "{{ build_count }}"
      exact_count: yes
      image: "{{ image_coreos_beta }}"
      flavor: "{{ build_flavor }}"
      key_name: "{{ rackspace_keyname }}"
      wait: yes
    register: rax_build_build
    tags: always

  - name: add newly provisioned build hosts to the correct groups
    add_host:
      name: "{{ item.name }}"
      ansible_ssh_host: "{{ item.rax_accessipv4 }}"
      fresh_host: yes
      groups: deconst-{{ instance }}-build-{{ deployment }}
    when: rax_build_build.action == "create"
    with_items: rax_build_build.success
    tags: always

  - name: add all build hosts to the correct groups
    add_host:
      name: "{{ item.name }}"
      ansible_ssh_host: "{{ item.rax_accessipv4 }}"
      groups: deconst-build,deconst-{{ instance }}-build-{{ deployment }}
    with_items: rax_build_build.instances
    tags: always

  - name: identify full build cluster rebuilds
    set_fact:
      fresh_build_cluster: "{{ (rax_build_build.action == 'create' and rax_build_build.success | length == build_count) | bool }}"
    tags: always

  - name: presenter load balancer
    rax_clb:
      name: deconst-{{ instance }}-presenter
      port: "{{ presenter_lb_port }}"
      protocol: HTTPS
      wait: yes
      state: present
    register: clb_presenter

  - name: locate the load balancer VIP
    set_fact: clb_vip_id={{ clb_presenter.balancer.virtual_ips[0].id }}

  - name: content service load balancer
    rax_clb:
      name: deconst-{{ instance }}-content
      port: "{{ content_service_lb_port }}"
      protocol: HTTPS
      vip_id: "{{ clb_vip_id }}"
      wait: yes
      timeout: 120
      state: present
    register: clb_content_service

  - name: build load balancer
    rax_clb:
      name: deconst-{{ instance }}-build
      port: "{{ build_lb_port }}"
      protocol: HTTP
      wait: yes
      state: present
    register: clb_build

  - name: identify full cluster rebuilds
    set_fact:
      fresh_cluster: "{{ fresh_worker_cluster and fresh_elastic_cluster and fresh_build_cluster }}"

  - name: force the generation of a new token for a fresh cluster
    file: path=.etcd_cluster_token state=absent
    when: fresh_cluster

  - name: etcd cluster token
    set_fact:
      etcd_cluster_token: "{{ lookup('password', '.etcd_cluster_token length=20') }}"

- name: ensure we're ready to continue
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
  - vars.yml
  - credentials.yml
  tasks:

  - name: trust newly launched hosts
    lineinfile:
      dest: "{{ lookup('env', 'HOME') }}/.ssh/known_hosts"
      create: yes
      state: present
      line: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.rax_accessipv4 )}}"
      regexp: "^{{ item.rax_accessipv4 }}"
    with_items: "{{ rax_build_workers.success | union(rax_build_elastic.success) | union(rax_build_build.success) }}"

  - name: print what we're waiting for
    pause:
      prompt: >
        Permit connections to your Elasticsearch and MongoDB clusters from the following IPs:

        {% for instance in rax_build_workers.success|union(rax_build_elastic.success)|union(rax_build_build.success)|sort %}
         {{ instance.name }}: public {{ instance.rax_accessipv4 }} servicenet {{ instance.rax_addresses.private[0].addr }}
        {% endfor %}

        Set the following DNS records:

         {{ domain }} => {{ clb_presenter.balancer.virtual_ips[0].address }}
         {{ build_domain }} => {{ clb_build.balancer.virtual_ips[0].address }}

        Continue when both are in place
    when: (rax_build_workers.success|length + rax_build_elastic.success|length + rax_build_build.success|length) > 0
