*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:DOCKER - [0:0]

# Always permit established connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Permit everything on localhost
-A INPUT -i lo -j ACCEPT

# Allow SSH access from specific hosts
{% for addr in source_addresses %}
-A INPUT -i eth0 -p tcp -m tcp --source {{ addr }} --dport 22 -j ACCEPT
{% else %}
-A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}

# etcd peering and clients over ServiceNet
{% for host in groups['deconst-all']|sort %}
-A INPUT -i eth1 -p tcp --source {{ hostvars[host].ansible_eth1.ipv4.address }} --dport 2380 -j ACCEPT
-A INPUT -i eth1 -p tcp --source {{ hostvars[host].ansible_eth1.ipv4.address }} --dport 2379 -j ACCEPT
{% endfor %}

# Enable containers on this host to connect to its host-level etcd
-A INPUT -i docker0 -p tcp --dport 2379 -j ACCEPT

# Allow packets from established connections through.
-A DOCKER -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

{% if inventory_hostname in groups['deconst-worker'] %}
# Allow access to service ports in each pod from only the load balancer, via ServiceNet
-A DOCKER -i eth0 -j DROP
-A DOCKER -i eth1 ! --source {{ hostvars.localhost.clb_content_service.balancer.sourceAddresses.ipv4Servicenet }} -j DROP
{% endif %}

{% if inventory_hostname in groups['deconst-build'] %}
# Allow access to service ports in each pod from only the load balancer, via ServiceNet
-A DOCKER -i eth0 -j DROP
-A DOCKER -i eth1 ! --source {{ hostvars.localhost.clb_build.balancer.sourceAddresses.ipv4Servicenet }} -j DROP
{% endif %}

{% if inventory_hostname in groups['deconst-elastic'] %}
# Accept logstash logs over ServiceNet
{% for host in groups['deconst-all']|sort %}
-A DOCKER -i eth1 -p tcp --source {{ hostvars[host].ansible_eth1.ipv4.address }} --dport 5000 -j ACCEPT
{% endfor %}
{% endif %}

COMMIT
