#!/bin/bash
#
# Add a newly launched service to the load balancer.

set -eou pipefail

[ ! $# = 3 ] && {
  cat <<USAGE >&2
Usage: peekaboo-up <container> <port> <lb id>

 Adds or updates a node on a load balancer that corresponds to a published port of a named
 Docker container.
USAGE
  exit 1
}

CONTAINER_NAME=${1:-}
CONTAINER_PORT=${2:-}
LOAD_BALANCER_ID=${3:-}

# Locate the published port to add to the load balancer.

PORT_PATH=/var/deconst/ports/${CONTAINER_NAME}.${CONTAINER_PORT}.port

[ -e ${PORT_PATH} ] || {
  echo "Port file ${PORT_PATH} does not exist."
  exit 1
}

APP_PORT=$(cat ${PORT_PATH})

[ -z ${APP_PORT} ] && {
  echo "Unable to find the application port for container ${CONTAINER_NAME}" >&2
  exit 1
}

# Wait up to 10m for the application to respond on its public port.
# This takes advantage of our convention to listen at `/version` with a simple JSON response.
ATTEMPT=0
while ! /usr/bin/curl --insecure --silent --fail https://localhost:${APP_PORT}/version ; do
  [ ${ATTEMPT} -lt 1200 ] || {
    echo "No response from ${CONTAINER_NAME} on ${APP_PORT}." >&2
    exit 1
  }

  echo "Waiting for ${CONTAINER_NAME} to respond on ${APP_PORT}: ${ATTEMPT}"
  ATTEMPT=$(( ${ATTEMPT} + 1 ))

  sleep 0.5
done

echo "Adding ${CONTAINER_NAME}:${APP_PORT} to the load balancer ${LOAD_BALANCER_ID}."

export LOAD_BALANCER_ID=${LOAD_BALANCER_ID}
export OS_USERNAME=${RACKSPACE_USERNAME}
export OS_PASSWORD=${RACKSPACE_APIKEY}
export OS_REGION_NAME=${RACKSPACE_REGION}
export APP_PORT=${APP_PORT}

/opt/bin/peekaboo
