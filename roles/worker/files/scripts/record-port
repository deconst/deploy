#!/bin/bash
#
# Record the port number of the container named as the first argument.

set -eou pipefail

CONTAINER_NAME=${1:-}
shift
CONTAINER_PORTS=$@

[ -z "${CONTAINER_NAME}" ] && {
  cat <<USAGE >&2
Usage: record-ports <container> <port>...

  Creates a file containing the publicly exposed port of a named container to a file at:
  /var/deconst/ports/<container-name>.<port>.port
USAGE
  exit 1
}

while ${1:-}; do
  CONTAINER_PORT=${1:-}
  PORT_PATH=/var/deconst/ports/${CONTAINER_NAME}.${CONTAINER_PORT}.port

  # Remove any pre-existing file at that path.
  [ -e "${PORT_PATH}" ] && {
    echo "Removing pre-existing file ${PORT_PATH}."
    rm -f "${PORT_PATH}"
  }

  # Wait for the container to exist.
  ATTEMPT=0
  while ! /usr/bin/docker inspect ${CONTAINER_NAME} >/dev/null 2>&1 ; do
    [ ${ATTEMPT} -lt 300 ] || {
      echo "${CONTAINER_NAME} never launched." >&2
      exit 1
    }

    echo "Waiting for ${CONTAINER_NAME} to launch: ${ATTEMPT}"
    ATTEMPT=$(( ${ATTEMPT} + 1 ))

    sleep 1
  done

  # Locate the published port to add to the load balancer.
  CONTAINER_PORT=$(/usr/bin/docker port "${CONTAINER_NAME}" "${CONTAINER_PORT}" | cut -d ':' -f 2)

  # Write the port number to the appropriate path.
  echo "Writing port ${CONTAINER_PORT} to ${PORT_PATH} for container ${CONTAINER_NAME}."
  echo -n ${CONTAINER_PORT} > ${PORT_PATH}

  shift
done
