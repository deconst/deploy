#!/usr/bin/env python

import pyrax
import yaml
import os
import sys
import subprocess
import re

# Get our bearings on the filesystem.
root = os.path.realpath(os.path.join(os.path.dirname(__file__), ".."))

# Collect credentials.
with open(os.path.join(root, "credentials.yml")) as credfile:
    creds = yaml.load(credfile)
rackspace_username = creds["rackspace_username"]
rackspace_apikey = creds["rackspace_api_key"]
rackspace_region = creds["rackspace_region"]
instance = creds["instance"]

pyrax.set_setting("identity_type", "rackspace")
pyrax.set_credentials(rackspace_username, rackspace_apikey)
cs = pyrax.connect_to_cloudservers(region=rackspace_region)

if len(sys.argv) > 1:
    matcher = re.compile("|".join(sys.argv[1:]), re.I)
else:
    matcher = re.compile(".")

lines = int(os.environ.get("LOG_LINES", "100"))

for server in cs.servers.list():
    group = server.metadata.get('group')
    if not group or not group.startswith("deconst-{}".format(instance)):
        continue

    print "*{:*^78}*".format(" SERVER: " + server.name + " ")

    addr = server.accessIPv4
    ssh_addr = "core@{}".format(addr)

    containers = subprocess.check_output(["ssh", ssh_addr, "docker", "ps", "-a"])
    for line in containers.split("\n"):
        parts = line.split()
        if not parts or parts[0] == "CONTAINER":
            continue

        container_name, container_id = parts[len(parts) - 1], parts[0]

        if not matcher.search(container_name):
            continue

        print "-{:->78}-".format(" " + container_name + " ")
        logs = subprocess.check_output([
            "ssh", ssh_addr, "docker", "logs",
            "--tail={}".format(lines), container_id])
        print logs
