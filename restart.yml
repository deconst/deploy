---
# Coordinate an orderly restart of the cluster if necessary.
#
# The variables in the "when:" clause are populated by the tasks in the worker role. This task
# has been split out from the main role so that it can be performed serially.

- hosts: deconst-worker
  vars_files:
  - vars.yml
  - credentials.yml
  serial: 1
  tasks:

  # The service module is smart: when you use it with with_nested or with_items, it consolidates
  # actions into a single invocation of the underlying binary (systemctl). However, this is exactly
  # what we *don't* want here, because then all of the services do the charging herd thing on their
  # load balancers.
  #
  # Instead, manually restart each pod together by invoking systemctl directly.
  - name: restart services
    command: systemctl restart deconst-content@{{ item }}.service deconst-presenter@{{ item }}.service
    with_items:
    - pod_names
    when: (environment|changed or worker_pulls|changed or worker_units|changed) and not (worker_service_results|changed)
    sudo: yes
    tags: restart

  - name: restart logstash-forwarder
    service: name=logstash-forwarder state=restarted
    when: (lf_binary|changed or lf_config|changed or lf_unit|changed) and not (lf_service_result|changed)
    sudo: yes
    tags: restart

- hosts: deconst-elastic
  serial: 1
  tasks:

  - name: restart logstash
    service: name=deconst-logstash.service state=restarted
    when: (elastic_pulls|changed or logstash_config|changed or units|changed) and not (elastic_service_results|changed)
    sudo: yes
    tags: restart

  - name: restart kibana
    service: name=deconst-kibana.service state=restarted
    when: (elastic_pulls|changed or kibana_config|changed or units|changed) and not (elastic_service_results|changed)
    sudo: yes
    tags: restart
